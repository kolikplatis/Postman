{
	"info": {
		"_postman_id": "be94adfc-c9b3-4d4f-871b-5bb1e2c68916",
		"name": "HW3",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "30147936"
	},
	"item": [
		{
			"name": "/login",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let jsonData = pm.response.json();\r",
							"\r",
							"pm.environment.set(\"token\", jsonData.token);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": []
				},
				"url": {
					"raw": "http://162.55.220.72:5005/login?login=kolikplatis&password=oleg",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"login"
					],
					"query": [
						{
							"key": "login",
							"value": "kolikplatis"
						},
						{
							"key": "password",
							"value": "oleg"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "/user_info",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1) Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// 2) Проверка структуры json в ответе.\r",
							"let jsonData = pm.response.json();\r",
							"pm.test(\"Check schema\", function () {\r",
							"    pm.expect(jsonData).to.have.all.keys(\"person\", \"qa_salary_after_12_months\", \"qa_salary_after_6_months\", \"start_qa_salary\");\r",
							"    pm.expect(jsonData.person).to.have.all.keys(\"u_age\", \"u_name\", \"u_salary_1_5_year\");\r",
							"});\r",
							"\r",
							"// 3) В ответе указаны коэффициенты умножения salary, напишите тесты по проверке правильности результата перемножения на коэффициент.\r",
							"let reqData = pm.request.body.raw; \r",
							"let data = JSON.parse(reqData);\r",
							"\r",
							"let salaryIn1_5 = data.salary*4;\r",
							"let respSalary1_5 = jsonData.person.u_salary_1_5_year;\r",
							"pm.test (\"Check u_salary_1_5_year = salary from request * 4\", function () {\r",
							"    pm.expect(salaryIn1_5).to.eql(salaryIn1_5);\r",
							"});\r",
							"\r",
							"let salaryAft12 = data.salary*2.9;\r",
							"let respSalary12 = jsonData.qa_salary_after_12_months;\r",
							"pm.test (\"Check qa_salary_after_12_months = salary from request * 2.9\", function () {\r",
							"    pm.expect(respSalary12).to.eql(salaryAft12);\r",
							"});\r",
							"\r",
							"let salaryAft6 = data.salary*2;\r",
							"let respSalary6 = jsonData.qa_salary_after_6_months;\r",
							"pm.test (\"Check qa_salary_after_6_months = salary from request * 2\", function () {\r",
							"    pm.expect(respSalary6).to.eql(salaryAft6);\r",
							"});\r",
							"\r",
							"// 4) Достать значение из поля 'u_salary_1.5_year' и передать в поле salary запроса http://162.55.220.72:5005/get_test_user\r",
							"pm.environment.set(\"respSalary1_5\", respSalary1_5);\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\"age\" : 25,\r\n\"salary\" : 1160,\r\n\"name\" : \"Oleg\",\r\n\"auth_token\" : \"{{token}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info"
					]
				}
			},
			"response": []
		},
		{
			"name": "/new_data",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1) Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// 2) Проверка структуры json в ответе.\r",
							"let jsonData = pm.response.json();\r",
							"pm.test(\"Check schema\", function () {\r",
							"    pm.expect(jsonData).to.have.all.keys(\"age\", \"name\", \"salary\");\r",
							"});\r",
							"\r",
							"// 3) В ответе указаны коэффициенты умножения salary, напишите тесты по проверке правильности результата перемножения на коэффициент.\r",
							"let reqData = pm.request.body.formdata;\r",
							"let salaryX2 = pm.request.body.formdata.get(\"salary\")*2;\r",
							"let salaryX3 = pm.request.body.formdata.get(\"salary\")*3;\r",
							"pm.test (\"Check salary[1] = salary from request * 2\", function () {\r",
							"    pm.expect(+jsonData.salary[1]).to.eql(salaryX2);\r",
							"});\r",
							"pm.test (\"Check salary[2] = salary from request * 3\", function () {\r",
							"    pm.expect(+jsonData.salary[2]).to.eql(salaryX3);\r",
							"});\r",
							"\r",
							"// 4) проверить, что 2-й элемент массива salary больше 1-го и 0-го\r",
							"if (+jsonData.salary[2] > +jsonData.salary[1] && +jsonData.salary[2] > jsonData.salary[0]) {\r",
							"    console.log(\"True\");\r",
							"};\r",
							"pm.test(\"Check salaryX3 > salary\", function () {\r",
							"    pm.expect(+jsonData.salary[2]).to.be.above(jsonData.salary[0]);\r",
							"});\r",
							"pm.test(\"Check salaryX3 > salaryX2\", function () {\r",
							"    pm.expect(+jsonData.salary[2]).to.be.above(+jsonData.salary[1]);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "age",
							"value": "25",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "1160",
							"type": "text"
						},
						{
							"key": "name",
							"value": "Oleg",
							"type": "text"
						},
						{
							"key": "auth_token",
							"value": "{{token}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/new_data",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"new_data"
					]
				}
			},
			"response": []
		},
		{
			"name": "/test_pet_info",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1) Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// 2) Проверка структуры json в ответе.\r",
							"let jsonData = pm.response.json();\r",
							"pm.test(\"Check schema\", function () {\r",
							"    pm.expect(jsonData).to.have.all.keys(\"age\", \"daily_food\", \"daily_sleep\", \"name\");\r",
							"});\r",
							"\r",
							"// 3) В ответе указаны коэффициенты умножения weight, напишите тесты по проверке правильности результата перемножения на коэффициент.\r",
							"let reqData = pm.request.body.formdata;\r",
							"let reqWeight = pm.request.body.formdata.get(\"weight\");\r",
							"let daily_food = reqWeight*0.012;\r",
							"let daily_sleep = reqWeight*2.5;\r",
							"pm.test (\"Check daily_food\", function () {\r",
							"    pm.expect(jsonData.daily_food).to.eql(daily_food);\r",
							"});\r",
							"pm.test (\"Check daily_sleep\", function () {\r",
							"    pm.expect(jsonData.daily_sleep).to.eql(daily_sleep);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "age",
							"value": "25",
							"type": "text"
						},
						{
							"key": "weight",
							"value": "80",
							"type": "text"
						},
						{
							"key": "name",
							"value": "Oleg",
							"type": "text"
						},
						{
							"key": "auth_token",
							"value": "{{token}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/test_pet_info",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"test_pet_info"
					]
				}
			},
			"response": []
		},
		{
			"name": "/get_test_user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1) Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// 2) Проверка структуры json в ответе.\r",
							"let jsonData = pm.response.json();\r",
							"pm.test(\"Check schema\", function () {\r",
							"    pm.expect(jsonData).to.have.all.keys(\"age\", \"family\", \"name\", \"salary\");\r",
							"});\r",
							"pm.test(\"Check schema2\", function () {\r",
							"    pm.expect(jsonData.family).to.have.all.keys(\"children\", \"u_salary_1_5_year\");\r",
							"});\r",
							"\r",
							"// 3) Проверить, что значение поля name = значению переменной name из окружения\r",
							"let nameEnv = pm.environment.get(\"nameHW\");\r",
							"pm.test (\"Check name\", function () {\r",
							"    pm.expect(jsonData.name).to.eql(nameEnv);\r",
							"});\r",
							"\r",
							"// 4) Проверить, что значение поля age в ответе соответствует отправленному в запросе значению поля age\r",
							"let reqData = pm.request.body.formdata;\r",
							"let reqAge = pm.request.body.formdata.get(\"age\");\r",
							"pm.test (\"Check age = age\", function () {\r",
							"    pm.expect(jsonData.age).to.eql(reqAge);\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "age",
							"value": "25",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{respSalary1_5}}",
							"type": "text"
						},
						{
							"key": "name",
							"value": "Oleg",
							"type": "text"
						},
						{
							"key": "auth_token",
							"value": "{{token}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/get_test_user\n",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"get_test_user\n"
					]
				}
			},
			"response": []
		},
		{
			"name": "/currency",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1) Можете взять любой объект из присланного списка, используйте js random.\r",
							"// В объекте возьмите Cur_ID и передать через окружение в следующий запрос.\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "auth_token",
							"value": "sfsd",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/currency",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"currency"
					]
				}
			},
			"response": []
		},
		{
			"name": "/curr_byn",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1) Статус код 200\r",
							"// 2) Проверка структуры json в ответе.\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "auth_token",
							"value": "{{token}}",
							"type": "text"
						},
						{
							"key": "curr_code",
							"value": "",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/curr_byn",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"curr_byn"
					]
				}
			},
			"response": []
		}
	]
}